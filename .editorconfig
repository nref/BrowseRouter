# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 2
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_readonly_field = true:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# ----------------
# Code files
# ----------------
[*.{cs,csx,xaml}]
indent_size = 2
tab_width = 2
max_line_length = 160
end_of_line = crlf

# ----------------
# Xml project files
# ----------------
[*.{csproj}]
indent_size = 2
tab_width = 2
end_of_line = crlf

# ----------------
# Xml config files
# ----------------
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2
tab_width = 2
end_of_line = crlf

# ----------------
# JSON files
# ----------------
[*.json]
indent_size = 2
tab_width = 2

# ----------------
# Diagnostic severity
# ----------------
[*.cs]
dotnet_diagnostic.CS1591.severity = none

# ----------------
# Dotnet code style settings:
# ----------------
[*.{cs}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# Require writing default access modifiers
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# ----------------
# CSharp code style settings:
# ----------------
[*.cs]
csharp_style_var_when_type_is_apparent = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none

# Private methods do not have to end in _
dotnet_naming_symbols.private_members.applicable_kinds           = class,struct,interface,enum,property,event,delegate

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Indentation
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false

# Other settings
csharp_preferred_modifier_order = public,private,protected,internal,static,new,virtual,abstract,sealed,override,readonly,extern,unsafe,volatile,async:warning
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:none
csharp_style_pattern_local_over_anonymous_function = true:none



#### Naming styles ####

# Naming rules
dotnet_naming_rule.interface_names_must_begin_with_I.symbols   = interfaces
dotnet_naming_rule.interface_names_must_begin_with_i.style = pascal_begin_with_I_style
dotnet_naming_rule.interface_names_must_begin_with_i.severity = warning

dotnet_naming_rule.private_and_protected_fields_must_end_with_underscore.symbols   = private_fields
dotnet_naming_rule.private_and_protected_fields_must_end_with_underscore.style = camel_end_with_underscore_style
dotnet_naming_rule.private_and_protected_fields_must_end_with_underscore.severity = warning

dotnet_naming_rule.private_and_protected_members_must_end_with_underscore.symbols   = private_members
dotnet_naming_rule.private_and_protected_members_must_end_with_underscore.style = pascal_end_with_underscore_style
dotnet_naming_rule.private_and_protected_members_must_end_with_underscore.severity = warning

dotnet_naming_rule.public_and_internal_members_must_begin_with_uppercase.symbols   = public_and_internal_members
dotnet_naming_rule.public_and_internal_members_must_begin_with_uppercase.style = pascal_underscore_allowed_style
dotnet_naming_rule.public_and_internal_members_must_begin_with_uppercase.severity = warning

dotnet_naming_rule.variables_must_begin_with_lowercase.symbols   = parameters_and_variables
dotnet_naming_rule.variables_must_begin_with_lowercase.style = camel_style
dotnet_naming_rule.variables_must_begin_with_lowercase.severity = warning


# Symbol specifications
dotnet_naming_symbols.interfaces.applicable_kinds           = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

dotnet_naming_symbols.private_fields.applicable_kinds           = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private,protected,protected_internal

dotnet_naming_symbols.private_members.applicable_kinds           = class,struct,interface,enum,property,method,event,delegate
dotnet_naming_symbols.private_members.applicable_accessibilities = private,protected,protected_internal

dotnet_naming_symbols.public_and_internal_members.applicable_kinds           = class,struct,enum,property,method,event,delegate,field
dotnet_naming_symbols.public_and_internal_members.applicable_accessibilities = public,internal

dotnet_naming_symbols.parameters_and_variables.applicable_kinds           = parameter
dotnet_naming_symbols.parameters_and_variables.applicable_accessibilities = *


# Naming styles
dotnet_naming_style.pascal_begin_with_I_style.capitalization = pascal_case
dotnet_naming_style.pascal_begin_with_I_style.required_prefix = I

dotnet_naming_style.camel_end_with_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_end_with_underscore_style.required_suffix = _

dotnet_naming_style.pascal_end_with_underscore_style.capitalization = pascal_case
dotnet_naming_style.pascal_end_with_underscore_style.required_suffix = _

dotnet_naming_style.pascal_underscore_allowed_style.capitalization = pascal_case
dotnet_naming_style.pascal_underscore_allowed_style.word_separator = _

dotnet_naming_style.camel_style.capitalization = camel_case
csharp_indent_labels = one_less_than_current
csharp_space_around_binary_operators = before_and_after
csharp_using_directive_placement = outside_namespace:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = true:silent
csharp_style_namespace_declarations = block_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
